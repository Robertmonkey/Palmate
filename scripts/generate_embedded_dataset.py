"""Generate a JavaScript fallback bundle of the Palmate dataset.

This utility mirrors the JSON payload from data/palworld_complete_data_final.json
into a JS file that attaches the object to `window.__PALMATE_EMBEDDED_DATA__`.
It is used as a last-resort data source when browsers block fetch() calls
(such as when serving the app directly from the filesystem).
"""
from __future__ import annotations

import json
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
SOURCE = ROOT / "data" / "palworld_complete_data_final.json"
TARGET = ROOT / "data" / "palworld_complete_data_fallback.js"
BANNER = "// Auto-generated by scripts/generate_embedded_dataset.py. Do not edit manually.\n"
GLOBAL_NAME = "__PALMATE_EMBEDDED_DATA__"

def main() -> None:
    if not SOURCE.exists():
        raise FileNotFoundError(f"Source dataset not found: {SOURCE}")

    with SOURCE.open("r", encoding="utf-8") as handle:
        payload = json.load(handle)

    js_payload = json.dumps(payload, indent=2, ensure_ascii=False)
    contents = (
        f"{BANNER}window.{GLOBAL_NAME} = {js_payload};\n"
    )

    TARGET.write_text(contents, encoding="utf-8")
    print(f"Wrote fallback dataset to {TARGET.relative_to(ROOT)}")


if __name__ == "__main__":
    main()
